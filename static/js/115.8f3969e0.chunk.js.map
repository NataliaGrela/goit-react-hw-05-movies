{"version":3,"file":"static/js/115.8f3969e0.chunk.js","mappings":"8MAEaA,EAAS,mCAAG,WAAOC,EAAUC,GAAjB,iFACP,gCACVC,EAAS,CACbC,QAAS,CACPC,cACE,+NALiB,kBAUEC,EAAAA,EAAAA,IATT,gCAS6BL,EAAWC,EAAQC,GAVzC,cAUfI,EAVe,OAWbC,EAASD,EAATC,KAXa,kBAiBdA,GAjBc,wCAmBrBC,QAAQC,IAAR,MAIM,IAAIC,MAAM,SAvBK,0DAAH,uD,wGCoEtB,UAjEe,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,gBAChB,GAA0BC,EAAAA,EAAAA,YAA1B,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,YAA5B,eAAOG,EAAP,KAAeC,EAAf,KAIMC,EAAY,mCAAG,WAAMC,GAAN,gFACnBA,EAAEC,iBACIlB,EAFa,iBAEMY,EAFN,uCAGbO,EAHa,mCAGC,qGACMrB,EAAAA,EAAAA,GANX,gBAM+BE,GAD1B,OACZoB,EADY,OAElBL,EAAUK,EAAUC,SAFF,2CAHD,8DAObF,IAPa,2CAAH,sDAelB,OACE,4BACE,6BACE,kBAAOG,UAAU,QAAQC,SARV,SAAAN,GACnB,IAAQO,EAAUP,EAAEQ,cAAZD,MACRX,EAASW,EACV,KAMK,mBACEF,UAAU,MACVI,MAAQd,EAAoC,CAAC,EAA7B,CAAEe,cAAe,QACjCC,KAAK,QACLC,QAASb,EAJX,uBASDF,GACC,0BACG,IACAA,EAAOgB,KAAI,SAAAC,GACV,IAAMC,EAA4B,OAApBD,EAAKE,WAAsBF,EAAKG,KAAOH,EAAKC,MAC1D,OACE,yBACE,SAAC,KAAD,CACEH,QAAS,WACPnB,EAAgBqB,EAAKI,cACtB,EACDb,UAAU,WACVc,GAAE,UAAKL,EAAKM,IALd,SAOGL,KARID,EAAKM,GAYjB,QAGH,qBAIP,C","sources":["api/getMovies.js","components/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const getMovies = async (endPoint, params) => {\n  const API_URL = 'https://api.themoviedb.org/3/';\n  const config = {\n    headers: {\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5ODUwODgyN2YwNWE3NWNlMDkwYzE5OGIzNDZjMzhlYyIsInN1YiI6IjY0OTA2ODcxYzNjODkxMDBjYWRiN2E2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.zspl2sUoDspIgRQ-TfLZNYqaNo_q586p__yDNruaAx8',\n    },\n  };\n\n  try {\n    const response = await axios.get(API_URL + endPoint + params, config);\n    const { data } = response;\n    // if (data.results.length === 0) {\n    //   //   alert(\n    //   //     'Sorry, there are no images matching your search query. Please try again.'\n    //   //   );\n    // }\n    return data;\n  } catch (error) {\n    console.log(error);\n    // alert(\n    //   'Sorry, there was an error. Please try again later.'\n    // );\n    throw new Error('Error');\n  }\n};\n","import PropTypes from 'prop-types';\nimport { useState } from 'react';\nimport { getMovies } from 'api/getMovies';\nimport { Link } from 'react-router-dom';\n\nconst Movies = ({ setCurrentImage }) => {\n  const [query, setQuery] = useState();\n  const [movies, setMovies] = useState();\n\n  const endPoint = '/search/movie';\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const params = `?query=${query}&include_adult=false&language=en-US`;\n    const fetchMovies = async () => {\n      const newMovies = await getMovies(endPoint, params);\n      setMovies(newMovies.results);\n    };\n    await fetchMovies();\n  };\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    setQuery(value);\n  };\n\n  return (\n    <div>\n      <form>\n        <input className=\"input\" onChange={handleChange}></input>\n        <button\n          className=\"btn\"\n          style={!query ? { pointerEvents: 'none' } : {}}\n          type=\"click\"\n          onClick={handleSubmit}\n        >\n          Search\n        </button>\n      </form>\n      {movies ? (\n        <ul>\n          {' '}\n          {movies.map(item => {\n            const title = item.media_type === 'tv' ? item.name : item.title;\n            return (\n              <li key={item.id}>\n                <Link\n                  onClick={() => {\n                    setCurrentImage(item.backdrop_path);\n                  }}\n                  className=\"title-el\"\n                  to={`${item.id}`}\n                >\n                  {title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <div></div>\n      )}\n    </div>\n  );\n};\n\nMovies.propTypes = {\n  setCurrentImage: PropTypes.func.isRequired,\n};\n\nexport default Movies;\n"],"names":["getMovies","endPoint","params","config","headers","Authorization","axios","response","data","console","log","Error","setCurrentImage","useState","query","setQuery","movies","setMovies","handleSubmit","e","preventDefault","fetchMovies","newMovies","results","className","onChange","value","currentTarget","style","pointerEvents","type","onClick","map","item","title","media_type","name","backdrop_path","to","id"],"sourceRoot":""}