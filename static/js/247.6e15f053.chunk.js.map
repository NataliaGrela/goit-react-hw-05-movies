{"version":3,"file":"static/js/247.6e15f053.chunk.js","mappings":"8MAEaA,EAAS,mCAAG,WAAOC,EAAUC,GAAjB,iFACP,gCACVC,EAAS,CACbC,QAAS,CACPC,cACE,+NALiB,kBAUEC,EAAAA,EAAAA,IATT,gCAUFL,EAAWC,EACrBC,GAZmB,cAUfI,EAVe,OAcbC,EAASD,EAATC,KAda,kBAoBdA,GApBc,wCAsBrBC,QAAQC,IAAR,MAIM,IAAIC,MAAM,SA1BK,0DAAH,uD,yGC+CtB,UA1Ca,WACX,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAe,iBAAaF,EAAb,YACrB,GAAwBG,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KAYA,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,qGACKnB,EAAAA,EAAAA,GAAWc,EAAiB,IADjC,OACZP,EADY,OAElBU,EAAQV,EAASS,MACjBP,QAAQC,IAAIH,GAHM,2CAAH,qDAMjBY,GAED,GAAE,IAEIH,EAAKI,OAAS,GACnB,0BACE,wBACGJ,EAAKK,KAAI,SAAAC,GACR,IAAQC,EAAkCD,EAAlCC,aAAcC,EAAoBF,EAApBE,KAAMC,EAAcH,EAAdG,UAC5B,OACE,2BACE,gBAAKC,UAAU,eAAf,UACE,gBACEA,UAAU,WACVC,IA3BC,mCA2BiBJ,EAAcK,IAAI,YAGxC,0BAAOJ,KACP,0CAAkBC,OAGvB,SAIL,0BACE,mEAGL,C","sources":["api/getMovies.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const getMovies = async (endPoint, params) => {\n  const API_URL = 'https://api.themoviedb.org/3/';\n  const config = {\n    headers: {\n      Authorization:\n        'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI5ODUwODgyN2YwNWE3NWNlMDkwYzE5OGIzNDZjMzhlYyIsInN1YiI6IjY0OTA2ODcxYzNjODkxMDBjYWRiN2E2YSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.zspl2sUoDspIgRQ-TfLZNYqaNo_q586p__yDNruaAx8',\n    },\n  };\n\n  try {\n    const response = await axios.get(\n      API_URL + endPoint + params,\n      config\n    );\n    const { data } = response;\n    // if (data.results.length === 0) {\n    //   //   alert(\n    //   //     'Sorry, there are no images matching your search query. Please try again.'\n    //   //   );\n    // }\n    return data;\n  } catch (error) {\n    console.log(error)\n    // alert(\n    //   'Sorry, there was an error. Please try again later.'\n    // );\n    throw new Error('Error');\n  }\n};\n","import { getMovies } from 'api/getMovies';\nimport { useParams } from 'react-router-dom';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\n\nconst baseUrlImg = 'https://image.tmdb.org/t/p/w500/';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const endPointCredits = `/movie/${movieId}/credits`;\n  const [cast, setCast] = useState([]);\n  useEffect(() => {\n    const fetchMovies = async () => {\n      const response = await getMovies( endPointCredits, '');\n      setCast(response.cast);\n      console.log(response);\n    };\n\n    fetchMovies();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return cast.length > 0 ? (\n    <div>\n      <ul>\n        {cast.map(item => {\n          const { profile_path, name, character } = item;\n          return (\n            <li>\n              <div className=\"cast-wrapper\">\n                <img\n                  className=\"cast-img\"\n                  src={baseUrlImg + profile_path} alt=\"cast\"\n                ></img>\n              </div>\n              <span>{name}</span>\n              <span>Character: {character}</span>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  ) : (\n    <div>\n      <p>We don't have any cast for this movie.</p>\n    </div>\n  );\n};\n\nexport default Cast;\n"],"names":["getMovies","endPoint","params","config","headers","Authorization","axios","response","data","console","log","Error","movieId","useParams","endPointCredits","useState","cast","setCast","useEffect","fetchMovies","length","map","item","profile_path","name","character","className","src","alt"],"sourceRoot":""}